// #![feature(proc_macro_hygiene, decl_macro)]

#[macro_use]
extern crate rocket;
#[macro_use]
extern crate diesel;
extern crate dotenv;

pub mod models;
pub mod schema;

// use self::voting::*;
use diesel::prelude::*;
use dotenv::dotenv;
use std::env;

use serde::{Deserialize, Serialize};
use rocket_contrib::json::Json;
use self::models::Voting;

#[derive(Deserialize, Serialize)]
struct Task {
    description: String,
    complete: bool,
}

#[get("/todo")]
fn new() -> Json<Task> {
    Json(Task {
        description: String::from("pussies eater"),
        complete: true,
    })
}

#[get("/")]
fn index() -> &'static str {
    "Hello, world!"
}

#[get("/hello/<name>")]
fn hello(name: String) -> String {
    format!("Hello, {}!", name.as_str())
}

fn main() {
    use crate::models::votings::dsl::votings;

    // rocket::ignite().mount("/", routes![index, hello,new]).launch();

    let connection = establish_connection();
    let results = votings.filter()
        .limit(5)
        .load::<Voting>(&connection)
        .expect("Error loading posts");

    println!("Displaying {} posts", results.len());
    for post in results {
        println!("{}", post.voting_id);
        println!("----------\n");
        println!("{}", post.name);
    }
}

